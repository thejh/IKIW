##############
# requirements
http = require \http
path = require \path

constructor = require './constructor'
compiler = require './compiler'

################
# configurations
config = JSON.parse (require \fs .readFileSync 'config', 'utf8')
constructor.setConfiguration config

compiler.setConfiguration config

(error) <- constructor.refreshIDTitleMap
if error
  console.log error
  return;

(error) <- constructor.refreshSubcategoryMap
if error
  console.log error
  return;

PORT = config.port
HTDOCS = config.htdocs

##############
## http-server
server = http.createServer (request, response) ->
  console.log "rec: request type '#{request.method}' from #{request.connection.remoteAddress}: '#{request.url}'"
  url = require 'url' .parse request.url, true
  
  edit = false
  if url.query and url.query.action and url.query.action is \edit then edit = true
  
  style = \normal
  if url.query and url.query.style and url.query.style is \plain then style = \plain
  
  doc_id = url.pathname.substr 1
  if doc_id.length is 0 then doc_id = config.home
  
  extra =
    \style : style
    \edit : edit
  
  if request.method is 'POST'
    # handle POST
    request.setEncoding 'utf8'
    post = ''
    
    request.on 'data', (data) ->
      if post is not void and post.length+data.length <= config.maxPostSize
        post += data
      else
        post := void
        response.writeHead 414 # Request-URI Too Long
        response.end!
    
    request.on 'end', ->
      if post is void then return # 414
      post := require 'querystring' .parse post
      if post.input
        (compilerResult) <- compiler doc_id, post.input
        extra <<< compilerResult
        constructor doc_id, response, extra
      else
        response.writeHead 400 # Bad Request
        response.end!
  else
    constructor doc_id, response, extra

server.listen PORT, '127.0.0.1'
console.log "Server running at http://127.0.0.1:#{PORT}/\n"

