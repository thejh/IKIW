request = require 'request'

config = null
couchdb = null

compile = (doc_id, newMarkup, onFinish) ->
  console.log "compiling '#doc_id'"
  result = {}
  tree = []
  
  try
    newMarkup = newMarkup.replace /\r/g, '' # delete windows chars
    
    res = parse newMarkup
    if res.error or not res.tree
      result.error = "<strong>ERROR while parsing blocks:</strong>\n#{res.error}"
      if res.tree then result.info = "\n<strong>tree parse so far:</strong>\n#{JSON.stringify tree}"
      return onFinish result
    
    tree = res.tree
    result.info = JSON.stringify tree
    
    ##################
    #### generate html
    res = generateBlocks tree
    if res.error
      result.error = "ERROR while generating HTML\n#{res.error}"
      return onFinish result
    
    ################
    #### save result
    url = "#{couchdb}#{doc_id}"
    (error, resp, body) <- request url
    if error
      result.error = "Couldn't get Document.\nDescription:\n#{JSON.stringify(error)}"
      return onFinish result
    if resp.statusCode is not 200
      result.error = "Couldn't get Document.\nResponse status code from DB: #{resp.statusCode}"
      return onFinish result
    # doc found
    document = JSON.parse body
    document.markup = newMarkup
    document.html = res.html
    (error, resp, body) <- request method: \PUT, url: url, multipart: [{\content-type : \application/json, body: JSON.stringify document}]
    if error
      result.error = "Couldn't save Document.\nDescription:\n#{JSON.stringify error}"
      return onFinish result
    result.ok = "Document compiled.\nDocument saved: DB response status code: #{resp.statusCode}"
    return onFinish result
  
  catch error
    result.error = error
    onFinish result

################################################################################
################################################################################
## parse

# main parse method returns
# {tree: (parse tree so far)[, error: (description of an error)]}
parse = (input) ->
  tree = []
  error = parseBlocks tree, input
  if error
    return error: "while parsing blocks:\n#{error}", tree: tree
  
  extractOneLiners tree # extract commands, headlines and defines
  deleteEmptyBlocks tree # delete blocks that contained only one-liners
  
  error = parseLists tree # identify and parse lists
  if error
    return error: "while parsing lists:\n#{error}", tree: tree
  
  if error
    return error: "while parsing paragraphs:\n#{error}", tree: tree
  
  return tree: tree

# parses the blocks, priority: 1 code, 2 math, 3 blockquote
parseBlocks = (tree, text) ->
  type = null
  while text and text.length > 0
    if type is null
      # no block open
      regex = // (\n\n+)
               | ([^\\]```)
               | (^```)
               | ([^\\]\$\$\$)
               | (^\$\$\$)
               | ([^\\]>>>)
               | (^>>>)          //
      index = text.search regex
      match = text.match regex
      
      if index is not -1
        if match is null then return "RegExp found and not found ?!\n#text"
        
        match = match.0 # select first occurrence
        mayEscaped = true
        newType = switch match.1
        case \` then \code
        case \$ then \math
        case \> then \quote
        default
          mayEscaped = false
          null
        
        if index is not 0 # space between last closing symbol and `index`
          tree.push {
            type: \par
            input: text.substr 0, index+mayEscaped
          }
        
        text = text.substr index+match.length # remaining text
        type = newType
      else
        tree.push {
          type: \par
          input: text
        }
        text = null
    else
      # close blocks
      if type is \code
        index = text.search /[^\\]```/g
        if index is -1 then return 'Block not closed: CODE block'
      else if type is \math
        index = text.search /[^\\]\$\$\$/g
        if index is -1 then return 'Block not closed: MATH block'
      else if type is \quote
        index = text.search /[^\\]<<</g
        if index is -1 then return 'Block not closed: QUOTE block'
      
      # remove escape characters
      input = text.substr 0, index+1
      if type is \code then input = input.replace /\\```/g '```'
      else if type is \math then input = input.replace /\\\$\$\$/g '$$$'
      else if type is \quote then input = input.replace /\\<<</g '<<<'
      
      tree.push {
        type: type
        input: input
      }
      
      text = text.substr index+4 # remaining text
      type = null
  
  return void

extractOneLiners = (tree) ->
  blockIndex = 0
  while blockIndex < tree.length
    block = tree[blockIndex]
    remainingText = ''
    for line of block.input.split /\n/g
      match = line.match /(^=+)|(^@)|(^\\)/
      if match # found
        match = match.0 # select first occurrence
        tree.splice blockIndex, 0, switch match.0
        case \=
          # headline
          type: \headline
          depth: match.length
          input: line.substr match.length
        case \@
          # definition for bibliography or link-shorthand
          type: \define
          input: line
        default
          # definition for bibliography or link-shorthand
          type: \command
          input: line.substr 1
        
        blockIndex ++
      else
        remainingText += line+\\n
    
    block.input = remainingText
    blockIndex ++
  
  return void

deleteEmptyBlocks = (tree) ->
  for index from tree.length-1 to 0 by -1
    if not tree[index]input or tree[index]input.length is 0
      tree.splice index, 1
  return void

parseLists = (tree) ->
  for block, blockIndex of tree
    if block.type is not \par then continue
    
    match = block.input.match /^\s*-[^-]/
    if match
      block.type = \unorderedlist
      error = _parseList block, block.input, blockIndex
      if error then return error
    else if match = block.input.match /(^\s*#[^#])/
      block.type = \orderedlist
      error = _parseList block, block.input, blockIndex
      if error then return error
  
  return void

_parseList = !(block, input, blockIndex) ->
  stack = [block]
  block.items = []
  
  lines = input.split /\n/g
  if lines.length is 0
    return void
  
  item = \text : "#{lines[0].substr(lines[0].match(/(^\s*-)|(^\s*#)/)[0].length)}\n" # del list symbols
  _peek stack .items.push item
  stack.push item
  lines.splice 0, 1 # delete first line in `lines`
  
  for line, lineIndex of lines
    match = line.match /^\s*-+/
    if match
      type = \unorderedlist
      depth = line.match(/-+/).0.length
    else
      match = line.match /^\s*#+/
      if match
        type = \orderedlist
        depth = line.match(/#+/).0.length
      else # no \- or \# in the beginning
        _peek stack .text += line+\\n
        continue
    
    # del list symbols
    line = line.substr(line.match // (^\s*-+) | (^\s*#+)// .0.length)+\\n
    
    if depth is stack.length-1 # same depth as previous item
      if type is stack[stack.length-2].type
        # new item, same list
        
        stack.pop!
        item = text: line
        _peek stack .items.push item
        stack.push item
      else
        return "List type not compatible in block #{blockIndex+1} line #{lineIndex+2}."
    else if depth is stack.length
      # higher depth than previous item, open new sublist
      
      peek = _peek stack
      
      if not peek.type then peek.type = type
      if not peek.items then peek.items = []
      
      item = text: line
      peek.items.push item
      stack.push item
    else if depth > stack.length
      return "Depth to high in block #{blockIndex+1} line #{lineIndex+2}."
    else
      # close other lists
      stack.pop! while stack.length > depth
      
      peek = _peek stack
      
      if peek.type !== type
        return "List type not compatible in block #{blockIndex+1} line #{lineIndex+2}."
      
      item = \text : line
      peek.items.push item
      stack.push item

parseParagraphs = (tree) ->
  for block, blockIndex of tree
    if block.type is \par
      _parseParagraph block, blockIndex

_parseParagraph = (block, blockIndex) ->
  stack = [block] # opened elements
  block.elements = [text: '']
  
  remainder = block.input
  while remainder.length > 0
    regex = /(^`)|([^\\]`)/g
    index = remainder.search regex
    if index !== -1
      match = remainder.match regex
      if index > 0
        if match.length is 1 then _peek stack .text += remainder.substr 0, index
        else _peek stack .text += remainder.substr 0, index+1 # escapable
      
      __closeAllElements stack
      elem =
        text: ''
        type: code
        

# closes all elements on the stack, except the first (the whole block)
# elements that can be closed by this method: *, _, ยง
__closeAllElements = (stack) ->
  while block.length > 1
    peek = _peek stack
    stack.pop!
    if peek.type is '' then
    
    #TODO

# extracts the parameters in the beginning of the text. text= `[paremeter] ...`
# returns: {\parameter: object (JSON), \text: (remaining text)}
__getParam = (text) ->
  if text.search /^\[/ !== 0
    # no parameters given
    return parameter: {}, text: text
  
  text = text.substr 1, text.length
  index = text.search /(^\])|([^\\]\])/
  if index is 0
    # parameter empty or malformed
    return parameter: {}, text: text.substr match.length, text.length
  
  param = text.substr 0, index+1
  remaining = text.substr index+2
  
  parsed = JSON.parse param
  
  return
    parameter: parsed
    text: remaining

################################################################################
# create html

generateBlocks = (tree) ->
  resulttext = ''
  for block, blockIndex of tree
    if block.type is \par
      resulttext += \\n + JSON.stringify tree + \\n
      #TODO
    else if block.type is \orderedlist or block.type is \unorderedlist
      resulttext += generateList block
    else if block.type is \math
      resulttext += generateMath block
    else if block.type is \quote
      resulttext += generateQuote block
  
  return html: resulttext

generateList = (block) ->
  if block.type is \orderedlist
    res = "<ol>\n"
    res += generateSubList subItem for subItem of block.items
    res += "\n</ol>"
  else 
    res = "<ul>\n"
    res += generateSubList subItem for subItem of block.items
    res += "\n</ul>"

generateSubList = (item) ->
  # TODO generate item text html
  if item.type
    res = "<li>#{item.text}\n#{if item.type is \orderedlist then '<ol>' else '<ul>'}\n"
    res += generateSubList subItem for subItem of item.items
    res += "#{if item.type is \orderedlist then '</ol>' else '</ul>'}\n</li>"
    return res
  else
    "<li>#{item.text}</li>"
generateMath = (block) ->
  #TODO
generateQuote = (block) ->
  "<blockquote>\n#{generateParagraph block.quote}\n</blockquote>"
################################################################################
# other

_delChars = (text, startIndex, length) ->
  firstPart = text.substr 0, startIndex
  lastPart = text.substr startIndex+length
  firstPart+lastPart

_peek = (elementStack) ->
  elementStack[elementStack.length-1]

module.exports = compile

compile.setConfiguration = (configuration) ->
  config := configuration
  couchdb := "http://#{config.couchdb.host}:#{config.couchdb.port}/#{config.couchdb.dbname}/"

