request = require 'request'

config = null
couchdb = null

idTitleMap = null
subcategoryMap = null

# Construct a website with XHTML and querying CouchDB
# extra = {edit: bool, style: 'normal'/'plain'[, error: 'include error box'][, info: 'include info box'][, ok: 'include ok box']}
# edit and style are not optional but the other fields
construct = (doc_id, toResponse, extra) ->
  # query couchdb
  url = "#{couchdb}#{doc_id}"
  console.log "send: request couchdb: #{url}"
  (error, response, body) <- request url
  if error
    console.log JSON.stringify(error)
    toResponse.writeHead 404
    toResponse.end!
    return;
  if response.statusCode !== 200
    toResponse.writeHead response.statusCode
    toResponse.end!
    return;
  
  document = JSON.parse body # document found
  if document.title # document is normal article
    content = ''
    
    # boxes from prev runs in the beginning
    if extra.error then content += constructPreBox \errorbox, extra.error
    if extra.info then content += constructPreBox \infobox, extra.info
    if extra.ok then content += constructPreBox \okbox, extra.ok
    
    # "real content"
    # category box
    (categoryBox) <- constructCategoryBox document
    if categoryBox.error
      content += construcPreBox \errorbox, categoryBox.error
    content += categoryBox.ok
    # content
    if extra.edit then content += constructArticleBodyEdit document
    else content += constructArticleBody document
    
    data =
      'title': document.title
      'content': content
    
    toResponse.writeHead 200, 'Content-Type': 'text/html'
    toResponse.end constructStndPage data, extra.style
  else # doc found, but it is not an article
    if document.content # hand out content field
      toResponse.writeHead 200, 'Content-Type': document.type
      toResponse.end document.content
    else # hand out one attachment
      if Object.keys document._attachments .length != 1
        # not exactly attachment available
        toResponse.writeHead 404
        toResponse.end!
        return;
      
      # request the attachement
      attachmentName = (Object.keys document._attachments)[0]
      url = "#{couchdb}#{doc_id}/#{attachmentName}"
      console.log "send: request couchdb for attachment: #{url}"
      (error, response, body) <- request {uri: url, encoding: null}
      if error # could not get attachment
        toResponse.writeHead 500
        toResponse.end!
      else if response.statusCode !== 200 # could not find attachment
        toResponse.writeHead response.statusCode
        toResponse.end!
      else
        if document.type
          # use type given in type-field in document
          toResponse.writeHead 200, 'Content-Type': document.type 
        else
          # use type given as the attachments mime type
          toResponse.writeHead 200, 'Content-Type': document._attachments[attachmentName].type
        
        toResponse.end body

constructPreBox = (styleClass, text) ->
  """
<pre class="#{styleClass}">
#{text}
</pre>
  """

constructArticleBody = (doc) ->
  """
      <div class="content">
#{doc.html}
      </div>

  """

constructArticleBodyEdit = (doc) ->
  """
<div class="content">
  <form action='?' method='POST' accept-charset='utf-8'>
    <textarea name='input' cols='80' rows = '25'>#{doc.markup}</textarea>
    <input type='submit' value='Fertig'>
  </form>
</div>

  """
  
constructCategoryBox = (doc, callback) ->
  
  
  categories = doc.categories
  if not categories then categories = []
  else if categories.length !== 0
    
    ;#TODO
  
  subcategories = doc.subcategories
  if not subcategories then subcategories = []
  else if subcategories.length !== 0
    ;#TODO
  
  callback ok: """
<div class="categories">
  <p class="categories">
    #{categories}
  </p>
  <p class="category">#{doc.title}</p>
  <p class="subcategories">
    #{subcategories}
  </p>
  
  <div class="dateInfoBox">
    <a class="button" href="./#{doc._id}?action=edit">EDIT CONTENT</a><br>
    <a class="button" href="./#{doc._id}?action=categories">EDIT CATEGORIES</a>
  </div>
</div>

    """

# data = {title:'...', content:'...'}
constructStndPage = (data, style) ->
  header = """
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>#{data.title}</title>
    
    <!-- meta -->
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta http-equiv="expires" content="0" />
    <!-- css -->
    <link rel="stylesheet" type="text/css" href="style.css" />
    #{if style is 'plain' then '<link rel="stylesheet" type="text/css" href="layout_plain.css" />' else '<link rel="stylesheet" type="text/css" href="layout_normal.css" />'}
  </head>
  <body>
    <div class="background">

           """
  footer = """
    </div>
  </body>
</html>

           """
  
  return header+data.content+footer

####################################################
####################################################

module.exports = construct

construct.setConfiguration = (configuration) ->
  config := configuration
  couchdb := "http://#{config.couchdb.host}:#{config.couchdb.port}/#{config.couchdb.dbname}/"

# callback = (error) -> ...
construct.refreshIDTitleMap = (callback) ->
  (error, resp, body) <- request "#{couchdb}_design/blink/_view/id_title_map"
  if error
    callback error
    return;
  if resp.statusCode !== 200
    callback "Couldnt request id_title_map; status code: #{resp.statusCode}"
    return;
  
  resp = JSON.parse body
  idTitleMap = resp.rows
  
  console.log JSON.stringify idTitleMap
  
  callback!

# callback = (error) -> ...
construct.refreshSubcategoryMap = (callback) ->
  (error, resp, body) <- request "#{couchdb}_design/blink/_view/subcategories"
  if error
    callback error
    return;
  if resp.statusCode !== 200
    callback "Couldnt request subcategory map; status code: #{resp.statusCode}"
    return;
  
  resp = JSON.parse body
  subcategoryMap = resp.rows[0].value
  
  console.log JSON.stringify subcategoryMap
  
  callback!

